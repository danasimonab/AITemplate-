# 1. Title
{e.g., “Name Microservice”}

# 2. Objective
{One-sentence outcome — “Microservice expectations”}

# 3. Background / Context
{Domain constraints, performance expectations, external systems, etc.}

# 4. Inputs
- Data contracts / sample JSON: {list or link}
- Tech stack
  - Language: **Java (latest LTS / GA)** — JDK 21+ preferred
  - Frameworks: {Spring Boot 3, Jakarta EE 10, Micronaut …}
  - Build: {Maven ≥ 3.9, Gradle ≥ 8}
  - Deployment: {Docker, K8s, bare metal, serverless …}

# 5. Desired Output
- Java code files that:
  - Use latest language features (`record`, pattern matching, sealed classes, etc.)
  - Apply **SOLID** principles & **clean code** (meaningful names, small methods)
  - Are **null-safe** (`Optional`, `Map.of`, `List.of`, etc.) — *no* raw `null` checks
  - Include **validation via a Validator Chain** (Strategy + Composite)  
    • each rule in its own class for testability  
    • short-circuit on first failure
  - Employ standard **design patterns** as needed  
    • Architectural: **MVC** (or CQRS, Hexagonal if more suitable)  
    • Creational/Structural/Behavioral: Builder, Singleton, Strategy, Composite, Flyweight, Adapter, etc.  
    • Comment *why* each pattern is used
  - Contain inline comments for every performance optimization
  - Present **readable, efficient conditionals** (e.g., guard clauses, `switch` with pattern matching)
- Deliverables:
  - Source code (.java, .xml/.gradle)
  - Optional: unit tests, Dockerfile, Swagger /OpenAPI spec

# 6. Constraints & Requirements
- Must compile & run on JDK {state version}
- Thread-safety where relevant (explain choices)
- Avoid legacy APIs and unnecessary third-party libs
- Follow {company style guide or Google Java Style} if supplied

# 7. Acceptance Criteria
- Builds & unit tests pass
- No `null`; uses modern constructs
- Validators are modular & easily extensible
- Each design pattern & optimization is documented
- Code is production-ready, maintainable, and performant

# 8. Examples (optional)
Input: {sample HTTP request, event message, CLI args}
Expected Output: {HTTP 201 response, DB row, log entry, etc.}

# 9. Follow-Up Actions
- If any part is unclear, ask before coding.
- Suggest a better native-Java approach if one exists.
